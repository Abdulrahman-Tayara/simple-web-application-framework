Index: src/samples/input.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><div cp-if=\"a\" cp-for=\"x in arr\">\r\n    <div id=\"id1\">\r\n        {{ x | lower(bla) }}\r\n        <div id=\"id1\">\r\n            {{ x | date('someformat') }}\r\n            <img src=\"\"/>\r\n            <img/>\r\n            <a href=\"\"/>\r\n            <a/>\r\n        </div>\r\n    </div>\r\n</div>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/samples/input.txt b/src/samples/input.txt
--- a/src/samples/input.txt	(revision 503f2dd52d14c2f5c7e2c1a6f72e52179d3c3757)
+++ b/src/samples/input.txt	(date 1624915052325)
@@ -1,12 +1,5 @@
-<div cp-if="a" cp-for="x in arr">
-    <div id="id1">
-        {{ x | lower(bla) }}
-        <div id="id1">
-            {{ x | date('someformat') }}
-            <img src=""/>
-            <img/>
-            <a href=""/>
-            <a/>
-        </div>
+<html>
+    <div @click="func()" >
+        {{x}}
     </div>
-</div>
\ No newline at end of file
+</html>
\ No newline at end of file
Index: src/samples/ast-output.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\"elements\":[{\"name\":\"div\",\"attributes\":[{\"name\":\"cp-if\",\"value\":{\"variableName\":\"a\"}},{\"name\":\"cp-for\",\"value\":{\"iterator\":\"x\",\"iterated value\":{\"variableName\":\"arr\"}}}],\"content\":[{\"text\":\"\"},{\"name\":\"div\",\"attributes\":[{\"name\":\"id\",\"value\":\"\\\"id1\\\"\"}],\"content\":[{\"text\":\"\"},{\"scopeExpression\":{\"pipedData\":{\"variableName\":\"x\"},\"transformer\":{\"functionName\":\"lower\",\"params\":[{\"value\":{\"variableName\":\"bla\"}}]}}},{\"text\":\"\"},{\"name\":\"div\",\"attributes\":[{\"name\":\"id\",\"value\":\"\\\"id1\\\"\"}],\"content\":[{\"text\":\"\"},{\"scopeExpression\":{\"pipedData\":{\"variableName\":\"x\"},\"transformer\":{\"functionName\":\"date\",\"params\":[{\"value\":{\"value\":\"someformat\"}}]}}},{\"text\":\"\"},{\"name\":\"img\",\"attributes\":[{\"name\":\"src\",\"value\":\"\\\"\\\"\"}]},{\"text\":\"\"},{\"name\":\"img\",\"attributes\":[]},{\"text\":\"\"},{\"name\":\"a\",\"attributes\":[{\"name\":\"href\",\"value\":\"\\\"\\\"\"}]},{\"text\":\"\"},{\"name\":\"a\",\"attributes\":[]},{\"text\":\"\"}]},{\"text\":\"\"}]},{\"text\":\"\"}]}]}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/samples/ast-output.json b/src/samples/ast-output.json
--- a/src/samples/ast-output.json	(revision 503f2dd52d14c2f5c7e2c1a6f72e52179d3c3757)
+++ b/src/samples/ast-output.json	(date 1624915166368)
@@ -1,1 +1,41 @@
-{"elements":[{"name":"div","attributes":[{"name":"cp-if","value":{"variableName":"a"}},{"name":"cp-for","value":{"iterator":"x","iterated value":{"variableName":"arr"}}}],"content":[{"text":""},{"name":"div","attributes":[{"name":"id","value":"\"id1\""}],"content":[{"text":""},{"scopeExpression":{"pipedData":{"variableName":"x"},"transformer":{"functionName":"lower","params":[{"value":{"variableName":"bla"}}]}}},{"text":""},{"name":"div","attributes":[{"name":"id","value":"\"id1\""}],"content":[{"text":""},{"scopeExpression":{"pipedData":{"variableName":"x"},"transformer":{"functionName":"date","params":[{"value":{"value":"someformat"}}]}}},{"text":""},{"name":"img","attributes":[{"name":"src","value":"\"\""}]},{"text":""},{"name":"img","attributes":[]},{"text":""},{"name":"a","attributes":[{"name":"href","value":"\"\""}]},{"text":""},{"name":"a","attributes":[]},{"text":""}]},{"text":""}]},{"text":""}]}]}
\ No newline at end of file
+{
+  "elements": [
+    {
+      "name": "html",
+      "attributes": [],
+      "content": [
+        {
+          "text": ""
+        },
+        {
+          "name": "div",
+          "attributes": [
+            {
+              "name": "click",
+              "value": {
+                "functionName": "func",
+                "params": []
+              }
+            }
+          ],
+          "content": [
+            {
+              "text": ""
+            },
+            {
+              "scopeExpression": {
+                "variableName": "x"
+              }
+            },
+            {
+              "text": ""
+            }
+          ]
+        },
+        {
+          "text": ""
+        }
+      ]
+    }
+  ]
+}
\ No newline at end of file
Index: src/semantic_check/SymantecChecker.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package semantic_check;\r\n\r\nimport SymbolTable.BasicScope;\r\nimport SymbolTable.Symbol;\r\nimport SymbolTable.attribute.CpAttribute;\r\nimport SymbolTable.expression.ExpressionSymbol;\r\nimport SymbolTable.expression.ForInExpression;\r\nimport SymbolTable.expression.PairExpression;\r\nimport SymbolTable.expression.VariableExpressionSymbol;\r\nimport SymbolTable.scopes.HtmlBasicScope;\r\nimport ast.nodes.Node;\r\nimport ast.nodes.html.HTMLElementNode;\r\nimport ast.nodes.html.HTMLTagNode;\r\nimport ast.nodes.html.HtmlDocumentNode;\r\n\r\nimport java.util.*;\r\n\r\npublic class SymantecChecker {\r\n\r\n    List<Exception> totalExceptions = new ArrayList<>();\r\n    Set<VariableExpressionSymbol> countersVariables = new HashSet<>();\r\n\r\n    final HtmlDocumentNode astTree;\r\n    final BasicScope scope;\r\n\r\n    List<IChecker> checkers = new ArrayList<>();\r\n\r\n    public SymantecChecker(HtmlDocumentNode astTree, BasicScope scope) {\r\n        this.astTree = astTree;\r\n        this.scope = scope;\r\n\r\n        checkers.add(new OccurrenceIdChecker());\r\n        checkers.add(new AttributeChecker());\r\n        checkers.add(new StructuralChecker());\r\n        checkers.add(new PipesChecker());\r\n    }\r\n\r\n    public void execute() {\r\n        execute(astTree);\r\n        execute(scope);\r\n    }\r\n\r\n    public void execute(Node node) {\r\n        if (node instanceof HtmlDocumentNode) {\r\n            HtmlDocumentNode htmlDocNode = ((HtmlDocumentNode) node);\r\n            for (HTMLElementNode elementNode : htmlDocNode.getElements()) {\r\n                execute(elementNode);\r\n            }\r\n        } else if (node instanceof HTMLTagNode) {\r\n            check(node);\r\n            HTMLTagNode tagNode = ((HTMLTagNode) node);\r\n\r\n            if (tagNode.hasContent()) {\r\n                for (HTMLElementNode elementNode : tagNode.getContent()) {\r\n                    execute(elementNode);\r\n                }\r\n            }\r\n\r\n        } else {\r\n            check(node);\r\n        }\r\n    }\r\n\r\n    // Pass the node to the checkers\r\n    private void check(Node node) {\r\n        checkers.forEach(c -> totalExceptions.addAll(c.check(node)));\r\n    }\r\n\r\n    public List<Exception> getTotalExceptions() {\r\n        return totalExceptions;\r\n    }\r\n\r\n\r\n    boolean existsUl_Ol = false;\r\n    boolean existsCpApp = false;\r\n\r\n    public void execute(BasicScope scope) {\r\n\r\n        System.out.println(\"scope \" + scope.getScopeName());\r\n        for (Symbol symbol : scope.symbols) {\r\n\r\n            if (symbol instanceof HtmlBasicScope) {\r\n                System.out.println(((HtmlBasicScope) symbol).tagName);\r\n\r\n                addChanges((HtmlBasicScope) symbol);\r\n\r\n                checkThings((HtmlBasicScope) symbol);\r\n\r\n                execute((BasicScope) symbol);\r\n\r\n                undoChanges();\r\n            }\r\n\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    private void checkThings(HtmlBasicScope scope) {\r\n\r\n        if (scope.tagName.equals(\"li\")) {\r\n            if (!existsUl_Ol) {\r\n                this.totalExceptions.add(new Exception(\"there is no ul-ol\"));\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n    private void undoChanges() {\r\n\r\n        this.existsUl_Ol = false;\r\n\r\n    }\r\n\r\n    private void addChanges(HtmlBasicScope scope) {\r\n\r\n        //li\r\n        if (scope.tagName.equals(\"ul\") ||\r\n                scope.tagName.equals(\"ol\")\r\n        ) {\r\n            this.existsUl_Ol = true;\r\n        }\r\n\r\n\r\n        //cp-app\r\n        for (Symbol symbol : scope.symbols) {\r\n            if (symbol instanceof CpAttribute\r\n                    && ((CpAttribute) symbol).attributeName.equals(\"cp-app\")) {\r\n\r\n                if (this.existsCpApp) {\r\n                    this.totalExceptions.add(new Exception(\"nested cp app\"));\r\n                } else {\r\n                    this.existsCpApp = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        //counters variables\r\n\r\n\r\n        CpAttribute cpForAttribute = scope.getCpAttribute(\"cp-for\");\r\n        if (cpForAttribute != null) {\r\n\r\n            ForInExpression expression = (ForInExpression) cpForAttribute.value;\r\n            //check variables\r\n            if (expression.countersExpression instanceof PairExpression) {\r\n\r\n\r\n                if (checkCounterVariablesContain(((PairExpression) expression.countersExpression).variableExpressionSymbol1)) {\r\n                    this.totalExceptions.add(new Exception(\r\n                            \"variable \" + ((PairExpression) expression.countersExpression).variableExpressionSymbol1.variableName + \" is repeated in loop\"\r\n                    ));\r\n                }\r\n                if (checkCounterVariablesContain(((PairExpression) expression.countersExpression).variableExpressionSymbol2)) {\r\n                    this.totalExceptions.add(new Exception(\r\n                            \"variable \" + ((PairExpression) expression.countersExpression).variableExpressionSymbol2.variableName + \" is repeated in loop\"\r\n                    ));\r\n                }\r\n\r\n                this.countersVariables.add(((PairExpression) expression.countersExpression).variableExpressionSymbol1);\r\n                this.countersVariables.add(((PairExpression) expression.countersExpression).variableExpressionSymbol2);\r\n\r\n            } else {//single variable\r\n\r\n                if(this.checkCounterVariablesContain((VariableExpressionSymbol) expression.countersExpression)){\r\n                    this.totalExceptions.add(new Exception(\r\n                            \"variable \" + ((VariableExpressionSymbol) expression.countersExpression).variableName + \" is repeated in loop\"\r\n                    ));\r\n                }\r\n\r\n                this.countersVariables.add((VariableExpressionSymbol) expression.countersExpression);\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    private boolean checkCounterVariablesContain(VariableExpressionSymbol variableExpressionSymbol) {\r\n        for (VariableExpressionSymbol countersVariable : this.countersVariables) {\r\n            if (countersVariable.compareSymbolWith(variableExpressionSymbol)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/semantic_check/SymantecChecker.java b/src/semantic_check/SymantecChecker.java
--- a/src/semantic_check/SymantecChecker.java	(revision 503f2dd52d14c2f5c7e2c1a6f72e52179d3c3757)
+++ b/src/semantic_check/SymantecChecker.java	(date 1624088860071)
@@ -76,11 +76,11 @@
 
     public void execute(BasicScope scope) {
 
-        System.out.println("scope " + scope.getScopeName());
+//        System.out.println("scope " + scope.getScopeName());
         for (Symbol symbol : scope.symbols) {
 
             if (symbol instanceof HtmlBasicScope) {
-                System.out.println(((HtmlBasicScope) symbol).tagName);
+//                System.out.println(((HtmlBasicScope) symbol).tagName);
 
                 addChanges((HtmlBasicScope) symbol);
 
@@ -138,8 +138,6 @@
         }
 
         //counters variables
-
-
         CpAttribute cpForAttribute = scope.getCpAttribute("cp-for");
         if (cpForAttribute != null) {
 
Index: src/SymbolTable/DefSymbols.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package SymbolTable;\r\n\r\nimport SymbolTable.attribute.CpAttribute;\r\nimport SymbolTable.expression.*;\r\nimport SymbolTable.scopes.HtmlBasicScope;\r\nimport SymbolTable.scopes.HtmlDocumentScope;\r\nimport gen.HTMLParser;\r\nimport gen.HTMLParserBaseListener;\r\n\r\n\r\npublic class DefSymbols extends HTMLParserBaseListener {\r\n\r\n    //the global scope that holds symbols, which in turn may implement scopes. so that's the starting point\r\n    public BasicScope globalScope;\r\n    //used for defining the current scope.\r\n    public transient Scope currentScope;\r\n\r\n\r\n    @Override\r\n    public void enterHtmlDocument(HTMLParser.HtmlDocumentContext ctx) {\r\n        globalScope = new HtmlDocumentScope(null);\r\n        currentScope = globalScope;\r\n    }\r\n\r\n    @Override\r\n    public void exitHtmlDocument(HTMLParser.HtmlDocumentContext ctx) {\r\n        currentScope = currentScope.getEnclosingScope();\r\n    }\r\n\r\n    @Override\r\n    public void exitCpApp(HTMLParser.CpAppContext ctx) {\r\n\r\n        //create expression\r\n        ExpressionSymbol expressionSymbol = new VariableExpressionSymbol(\r\n                ctx.ANY_NAME().getText(),\r\n                \"cp app expression\"\r\n        );\r\n\r\n        //create the cp app attribute\r\n        CpAttribute cpAppAttribute = new CpAttribute(\"cp-app\", expressionSymbol);\r\n        currentScope.addSymbol(cpAppAttribute);\r\n\r\n    }\r\n\r\n    @Override\r\n    public void enterHtmlElement(HTMLParser.HtmlElementContext ctx) {\r\n        HtmlBasicScope htmlBasicScope = new HtmlBasicScope(ctx.TAG_NAME().get(0).getText(), currentScope);\r\n        currentScope.addSymbol(htmlBasicScope);\r\n        currentScope = htmlBasicScope;\r\n    }\r\n\r\n    @Override\r\n    public void exitHtmlElement(HTMLParser.HtmlElementContext ctx) {\r\n        currentScope = currentScope.getEnclosingScope();\r\n    }\r\n\r\n    @Override\r\n    public void exitCpIF(HTMLParser.CpIFContext ctx) {\r\n        this.addTypicalCpSymbol(ctx.expression(), \"cp-if\");\r\n    }\r\n\r\n    @Override\r\n    public void exitCpElseIf(HTMLParser.CpElseIfContext ctx) {\r\n        this.addTypicalCpSymbol(ctx.expression(), \"cp-if-else\");\r\n    }\r\n\r\n    @Override\r\n    public void exitCpElse(HTMLParser.CpElseContext ctx) {\r\n\r\n        //there is no expression in cp else\r\n\r\n        //create the attribute\r\n        CpAttribute cpElseAttribute = new CpAttribute(\"cp-else\", null);\r\n        currentScope.addSymbol(cpElseAttribute);\r\n\r\n        //no expression to be added to scope\r\n\r\n    }\r\n\r\n    /**\r\n     * Adds the iterators in the new cp for scope.\r\n     *\r\n     * @param ctx\r\n     */\r\n\r\n    @Override\r\n    public void exitForInExpression(HTMLParser.ForInExpressionContext ctx) {\r\n        //create expressions\r\n        ExpressionSymbol countersExpression;\r\n        ExpressionSymbol forExpression;\r\n        if (ctx.pairExpression() != null) { //pair expression for loop\r\n\r\n            countersExpression = ExpressionSymbolFactory.make(ctx.pairExpression());\r\n            forExpression = ExpressionSymbolFactory.make(ctx.expression(0));\r\n        } else {//normal for in\r\n\r\n            countersExpression = ExpressionSymbolFactory.make(ctx.expression(0));\r\n            forExpression = ExpressionSymbolFactory.make(ctx.expression(1));\r\n        }\r\n        ForInExpression forInExpression = new ForInExpression(\r\n                countersExpression,\r\n                forExpression,\r\n                ctx.getClass().getName()\r\n        );\r\n\r\n        //create attributes\r\n\r\n        CpAttribute forAttribute = new CpAttribute(\"cp-for\", forInExpression);\r\n        this.currentScope.addSymbol(forAttribute);\r\n\r\n        //add to scope\r\n\r\n        this.addToAppropriateScope(forInExpression);\r\n\r\n    }\r\n\r\n    @Override\r\n    public void exitVariableScopeContent(HTMLParser.VariableScopeContentContext ctx) {\r\n\r\n\r\n        System.out.println(((BasicScope) this.currentScope).symbols);\r\n        ExpressionSymbol expression = ExpressionSymbolFactory.make(ctx.expression());\r\n\r\n        if (this.currentScope.bindOrLookUpSymbol(expression) == null) {\r\n            System.out.println(\"no thing in current scope\");\r\n            this.globalScope.addSymbol(expression);\r\n        }\r\n\r\n        ExpressionSymbol usageExpression = new TextVariableUsage(\r\n                ((VariableExpressionSymbol) expression).variableName,\r\n                TextVariableUsage.class.getName()\r\n        );\r\n\r\n\r\n        this.currentScope.addSymbol(usageExpression);\r\n    }\r\n\r\n    @Override\r\n    public void exitCpSHOW(HTMLParser.CpSHOWContext ctx) {\r\n\r\n        this.addTypicalCpSymbol(ctx.expression(), \"cp-show\");\r\n\r\n    }\r\n\r\n    @Override\r\n    public void exitCpHIDE(HTMLParser.CpHIDEContext ctx) {\r\n        this.addTypicalCpSymbol(ctx.expression(), \"cp-hide\");\r\n    }\r\n\r\n    @Override\r\n    public void exitCpMODEL(HTMLParser.CpMODELContext ctx) {\r\n\r\n        //create the expression\r\n        ExpressionSymbol expression = ExpressionSymbolFactory.make(ctx.expression());\r\n\r\n        //create the attribute\r\n        CpAttribute cpModelAttr = new CpAttribute(\"cp-model\", expression);\r\n        currentScope.addSymbol(cpModelAttr);\r\n\r\n        //add to scope\r\n        this.addToAppropriateScope(expression);\r\n\r\n    }\r\n\r\n    @Override\r\n    public void exitCpSWITCH(HTMLParser.CpSWITCHContext ctx) {\r\n        this.addTypicalCpSymbol(ctx.expression(), \"cp-switch\");\r\n    }\r\n\r\n    @Override\r\n    public void exitCpSWITCH_CASE(HTMLParser.CpSWITCH_CASEContext ctx) {\r\n        this.addTypicalCpSymbol(ctx.expression(), \"cp-switch-case\");\r\n    }\r\n\r\n    @Override\r\n    public void exitCpSWITCH_DEFAULT(HTMLParser.CpSWITCH_DEFAULTContext ctx) {\r\n\r\n        //create attribute\r\n        CpAttribute cpAttribute = new CpAttribute(\"cp-switch-default\", null);\r\n        this.currentScope.addSymbol(cpAttribute);\r\n\r\n    }\r\n\r\n    @Override\r\n    public void exitEvent(HTMLParser.EventContext ctx) {\r\n        this.addTypicalCpSymbol(ctx.expression(), \"cp-event\");\r\n    }\r\n\r\n\r\n    private void addToAppropriateScope(ExpressionSymbol expressionSymbol) {\r\n        if (expressionSymbol instanceof VariableExpressionSymbol) {\r\n            globalScope.addSymbol(expressionSymbol);\r\n        } else if (expressionSymbol instanceof LiteralExpressionSymbol) {\r\n            //dont add to global add only to attribute\r\n        } else if (expressionSymbol instanceof ParsableExpressionSymbol) {\r\n            //just for now\r\n            globalScope.addSymbol(expressionSymbol);\r\n        } else if (expressionSymbol instanceof ForInExpression) {\r\n\r\n            //add counters\r\n            if (((ForInExpression) expressionSymbol).countersExpression instanceof PairExpression) {\r\n                ((BasicScope) this.currentScope).addSymbolWithoutBinding(((PairExpression) ((ForInExpression) expressionSymbol).countersExpression).variableExpressionSymbol1);\r\n                ((BasicScope) this.currentScope).addSymbolWithoutBinding(((PairExpression) ((ForInExpression) expressionSymbol).countersExpression).variableExpressionSymbol2);\r\n            }\r\n            if (((ForInExpression) expressionSymbol).countersExpression instanceof VariableExpressionSymbol) {\r\n                ((BasicScope) this.currentScope).addSymbolWithoutBinding(((ForInExpression) expressionSymbol).countersExpression);\r\n            }\r\n\r\n            //add expression\r\n            if (((ForInExpression) expressionSymbol).forExpression instanceof VariableExpressionSymbol) {\r\n                this.globalScope.addSymbol(((ForInExpression) expressionSymbol).forExpression);\r\n            }\r\n\r\n\r\n        } else {\r\n            System.out.println(\"something is fucked up\");\r\n        }\r\n    }\r\n\r\n\r\n    /*\r\n     *   A typical cp symbol has an expression (a lot of potential expressions ex: variable, literal string, ..)\r\n     *   its expression will be added to the same scope the cp symbol is in.\r\n     *   and if the expression should be added globally it will be added later.\r\n     *\r\n     * */\r\n    private void addTypicalCpSymbol(HTMLParser.ExpressionContext expressionContext, String cpName) {\r\n        //create the expression\r\n        ExpressionSymbol expression = ExpressionSymbolFactory.make(expressionContext);\r\n\r\n        //create attribute\r\n        CpAttribute cpAttribute = new CpAttribute(cpName, expression);\r\n        this.currentScope.addSymbol(cpAttribute);\r\n\r\n        //add to scope\r\n        this.addToAppropriateScope(expression);\r\n\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/SymbolTable/DefSymbols.java b/src/SymbolTable/DefSymbols.java
--- a/src/SymbolTable/DefSymbols.java	(revision 503f2dd52d14c2f5c7e2c1a6f72e52179d3c3757)
+++ b/src/SymbolTable/DefSymbols.java	(date 1624087043413)
@@ -118,11 +118,16 @@
     public void exitVariableScopeContent(HTMLParser.VariableScopeContentContext ctx) {
 
 
-        System.out.println(((BasicScope) this.currentScope).symbols);
+
+
+//        System.out.println(((BasicScope) this.currentScope).symbols);
         ExpressionSymbol expression = ExpressionSymbolFactory.make(ctx.expression());
 
+        if(expression == null)
+            return;
+
         if (this.currentScope.bindOrLookUpSymbol(expression) == null) {
-            System.out.println("no thing in current scope");
+//            System.out.println("no thing in current scope");
             this.globalScope.addSymbol(expression);
         }
 
Index: src/SymbolTable/VariableSymbol.java
===================================================================
diff --git a/src/SymbolTable/VariableSymbol.java b/src/SymbolTable/VariableSymbol.java
deleted file mode 100644
--- a/src/SymbolTable/VariableSymbol.java	(revision 503f2dd52d14c2f5c7e2c1a6f72e52179d3c3757)
+++ /dev/null	(revision 503f2dd52d14c2f5c7e2c1a6f72e52179d3c3757)
@@ -1,8 +0,0 @@
-package SymbolTable;
-
-public class VariableSymbol extends Symbol {
-	public VariableSymbol(String name) {
-		super(name);
-	}
-
-}
Index: src/samples/symbol-table-result.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n  \"globalScope\": {\r\n    \"Scope\": [\r\n      {\r\n        \"tagName\": \"div\",\r\n        \"Scope\": [],\r\n        \"symbol\": \"html element\"\r\n      }\r\n    ],\r\n    \"symbol\": \"HtmlDocument Scope\"\r\n  }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/samples/symbol-table-result.json b/src/samples/symbol-table-result.json
--- a/src/samples/symbol-table-result.json	(revision 503f2dd52d14c2f5c7e2c1a6f72e52179d3c3757)
+++ b/src/samples/symbol-table-result.json	(date 1624915054123)
@@ -2,9 +2,31 @@
   "globalScope": {
     "Scope": [
       {
-        "tagName": "div",
-        "Scope": [],
-        "symbol": "html element"
+        "tagName": "html",
+        "Scope": [
+          {
+            "tagName": "div",
+            "Scope": [
+              {
+                "attributeName": "cp-event",
+                "symbol": "cp attribute"
+              },
+              {
+                "TEXT_VARIABLE": "text variable usage",
+                "variableName": "x",
+                "type": "SymbolTable.expression.TextVariableUsage",
+                "symbol": "text variable usage"
+              }
+            ],
+            "symbol": "html element"
+          }
+        ],
+        "symbol": "html element"
+      },
+      {
+        "variableName": "x",
+        "type": "gen.HTMLParser$VariableNameExpressionContext",
+        "symbol": "variable expression"
       }
     ],
     "symbol": "HtmlDocument Scope"
Index: src/semantic_check/exceptions/DuplicatedIteratorException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/semantic_check/exceptions/DuplicatedIteratorException.java b/src/semantic_check/exceptions/DuplicatedIteratorException.java
new file mode 100644
--- /dev/null	(date 1624086491094)
+++ b/src/semantic_check/exceptions/DuplicatedIteratorException.java	(date 1624086491094)
@@ -0,0 +1,7 @@
+package semantic_check.exceptions;
+
+public class DuplicatedIteratorException extends SemanticException{
+    public DuplicatedIteratorException(String message, int line, int col) {
+        super(message, line, col);
+    }
+}
Index: out/production/compiler-project-4th-year/samples/input.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><div cp-if=\"a\" cp-for=\"x in arr\">\r\n    <div id=\"id1\">\r\n        {{ x | lower(bla) }}\r\n        <div id=\"id1\">\r\n            {{ x | date('someformat') }}\r\n            <img src=\"\"/>\r\n            <img/>\r\n            <a href=\"\"/>\r\n            <a/>\r\n        </div>\r\n    </div>\r\n</div>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/out/production/compiler-project-4th-year/samples/input.txt b/out/production/compiler-project-4th-year/samples/input.txt
--- a/out/production/compiler-project-4th-year/samples/input.txt	(revision 503f2dd52d14c2f5c7e2c1a6f72e52179d3c3757)
+++ b/out/production/compiler-project-4th-year/samples/input.txt	(date 1624915052325)
@@ -1,12 +1,5 @@
-<div cp-if="a" cp-for="x in arr">
-    <div id="id1">
-        {{ x | lower(bla) }}
-        <div id="id1">
-            {{ x | date('someformat') }}
-            <img src=""/>
-            <img/>
-            <a href=""/>
-            <a/>
-        </div>
+<html>
+    <div @click="func()" >
+        {{x}}
     </div>
-</div>
\ No newline at end of file
+</html>
\ No newline at end of file
Index: out/production/compiler-project-4th-year/samples/ast-output.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\"elements\":[{\"name\":\"div\",\"attributes\":[{\"name\":\"cp-if\",\"value\":{\"variableName\":\"a\"}},{\"name\":\"cp-for\",\"value\":{\"iterator\":\"x\",\"iterated value\":{\"variableName\":\"arr\"}}}],\"content\":[{\"text\":\"\"},{\"name\":\"div\",\"attributes\":[{\"name\":\"id\",\"value\":\"\\\"id1\\\"\"}],\"content\":[{\"text\":\"\"},{\"scopeExpression\":{\"pipedData\":{\"variableName\":\"x\"},\"transformer\":{\"functionName\":\"lower\",\"params\":[{\"value\":{\"variableName\":\"bla\"}}]}}},{\"text\":\"\"},{\"name\":\"div\",\"attributes\":[{\"name\":\"id\",\"value\":\"\\\"id1\\\"\"}],\"content\":[{\"text\":\"\"},{\"scopeExpression\":{\"pipedData\":{\"variableName\":\"x\"},\"transformer\":{\"functionName\":\"date\",\"params\":[{\"value\":{\"value\":\"someformat\"}}]}}},{\"text\":\"\"},{\"name\":\"img\",\"attributes\":[{\"name\":\"src\",\"value\":\"\\\"\\\"\"}]},{\"text\":\"\"},{\"name\":\"img\",\"attributes\":[]},{\"text\":\"\"},{\"name\":\"a\",\"attributes\":[{\"name\":\"href\",\"value\":\"\\\"\\\"\"}]},{\"text\":\"\"},{\"name\":\"a\",\"attributes\":[]},{\"text\":\"\"}]},{\"text\":\"\"}]},{\"text\":\"\"}]}]}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/out/production/compiler-project-4th-year/samples/ast-output.json b/out/production/compiler-project-4th-year/samples/ast-output.json
--- a/out/production/compiler-project-4th-year/samples/ast-output.json	(revision 503f2dd52d14c2f5c7e2c1a6f72e52179d3c3757)
+++ b/out/production/compiler-project-4th-year/samples/ast-output.json	(date 1624906936177)
@@ -1,1 +1,47 @@
-{"elements":[{"name":"div","attributes":[{"name":"cp-if","value":{"variableName":"a"}},{"name":"cp-for","value":{"iterator":"x","iterated value":{"variableName":"arr"}}}],"content":[{"text":""},{"name":"div","attributes":[{"name":"id","value":"\"id1\""}],"content":[{"text":""},{"scopeExpression":{"pipedData":{"variableName":"x"},"transformer":{"functionName":"lower","params":[{"value":{"variableName":"bla"}}]}}},{"text":""},{"name":"div","attributes":[{"name":"id","value":"\"id1\""}],"content":[{"text":""},{"scopeExpression":{"pipedData":{"variableName":"x"},"transformer":{"functionName":"date","params":[{"value":{"value":"someformat"}}]}}},{"text":""},{"name":"img","attributes":[{"name":"src","value":"\"\""}]},{"text":""},{"name":"img","attributes":[]},{"text":""},{"name":"a","attributes":[{"name":"href","value":"\"\""}]},{"text":""},{"name":"a","attributes":[]},{"text":""}]},{"text":""}]},{"text":""}]}]}
\ No newline at end of file
+{
+  "elements": [
+    {
+      "name": "html",
+      "attributes": [],
+      "content": [
+        {
+          "text": ""
+        },
+        {
+          "name": "div",
+          "attributes": [
+            {
+              "name": "id",
+              "value": "\"222\""
+            },
+            {
+              "name": "cp-for",
+              "value": {
+                "iterator": "x",
+                "iterated value": {
+                  "variableName": "y"
+                }
+              }
+            }
+          ],
+          "content": [
+            {
+              "text": ""
+            },
+            {
+              "scopeExpression": {
+                "variableName": "x"
+              }
+            },
+            {
+              "text": ""
+            }
+          ]
+        },
+        {
+          "text": ""
+        }
+      ]
+    }
+  ]
+}
\ No newline at end of file
Index: src/SymbolTable/expression/PipeExpression.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/SymbolTable/expression/PipeExpression.java b/src/SymbolTable/expression/PipeExpression.java
new file mode 100644
--- /dev/null	(date 1624087907844)
+++ b/src/SymbolTable/expression/PipeExpression.java	(date 1624087907844)
@@ -0,0 +1,15 @@
+package SymbolTable.expression;
+
+public class PipeExpression extends ExpressionSymbol {
+
+    public transient static final String PIPE_EXPRESSION = "pipe expression";
+
+    public ExpressionSymbol variable;
+    public ExpressionSymbol transformer;
+
+
+    public PipeExpression(ExpressionSymbol variable, String type) {
+        super(PIPE_EXPRESSION, type);
+        this.variable = variable;
+    }
+}
Index: src/SymbolTable/BasicScope.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package SymbolTable;\r\n\r\n\r\nimport SymbolTable.attribute.CpAttribute;\r\nimport SymbolTable.expression.VariableExpressionSymbol;\r\nimport com.google.gson.annotations.SerializedName;\r\n\r\nimport java.util.*;\r\n\r\npublic class BasicScope extends Symbol implements Scope {\r\n\r\n    protected transient Scope enclosingScope;\r\n    @SerializedName(\"Scope\")\r\n    public List<Symbol> symbols = new ArrayList<>();\r\n\r\n    public BasicScope(String name, Scope enclosingScope) {\r\n        super(name);\r\n        this.enclosingScope = enclosingScope;\r\n    }\r\n\r\n    @Override\r\n    public String getScopeName() {\r\n        return \"Global Scope\";\r\n    }\r\n\r\n    @Override\r\n    public void addSymbol(Symbol symbol) {\r\n\r\n        if(symbol instanceof VariableExpressionSymbol){\r\n            if(this.bindOrLookUpSymbol(symbol) == null){\r\n                this.symbols.add(symbol);\r\n            }\r\n        }else{\r\n            this.symbols.add(symbol);\r\n        }\r\n\r\n//        if (symbol instanceof Scope) { //scope\r\n//            symbols.add(symbol);\r\n//        } else { //variable\r\n//            if (this.bindOrLookUpSymbol(symbol) == null) {\r\n//                this.symbols.add(symbol);\r\n//            }\r\n//\r\n//        }\r\n    }\r\n\r\n    public void addSymbolWithoutBinding(Symbol symbol){\r\n        this.symbols.add(symbol);\r\n    }\r\n\r\n    public CpAttribute getCpAttribute(String attributeName){\r\n        for (Symbol symbol : this.symbols) {\r\n            if(symbol instanceof CpAttribute && ((CpAttribute) symbol).attributeName.equals(attributeName)){\r\n                return (CpAttribute) symbol;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n    /**\r\n     * searches in the current table and above\r\n     */\r\n\r\n    @Override\r\n    public Symbol bindOrLookUpSymbol(Symbol searchedForSymbol) {\r\n\r\n        if (searchedForSymbol instanceof VariableExpressionSymbol) {\r\n\r\n            Symbol s = null;\r\n            for (Symbol symbol : this.symbols) {\r\n                if (symbol instanceof VariableExpressionSymbol) {\r\n                    if (((VariableExpressionSymbol) searchedForSymbol).compareSymbolWith((VariableExpressionSymbol) symbol)) {\r\n                        s = symbol;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (s != null) return s;\r\n            if (getEnclosingScope() != null) {\r\n                return getEnclosingScope().bindOrLookUpSymbol(searchedForSymbol);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n//    public boolean bindOrLookUpComparableSymbol(ICompareableSymbol<Symbol> searchedForSymbol) {\r\n//        boolean match = false;\r\n//        for (Symbol symbol : this.symbols) {\r\n//            if(symbol instanceof ICompareableSymbol){\r\n//                if(searchedForSymbol.compareSymbolWith(symbol)){\r\n//                    match = true;\r\n//                    break;\r\n//                }\r\n//            }\r\n//        }\r\n//        if (match) return true;\r\n//        if (getEnclosingScope() != null) {\r\n//            return ((BasicScope)getEnclosingScope()).bindOrLookUpComparableSymbol(searchedForSymbol);\r\n//        }\r\n//        return false;\r\n//    }\r\n\r\n    @Override\r\n    public Scope getEnclosingScope() {\r\n        return enclosingScope;\r\n    }\r\n\r\n//    public void addToGlobalIfCould(ICompareableSymbol<Symbol> symbol, BasicScope globalScope){\r\n//\r\n//        if(!this.bindOrLookUpComparableSymbol(symbol)){\r\n//            globalScope.addSymbol((Symbol) symbol);\r\n//        }\r\n//\r\n//    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/SymbolTable/BasicScope.java b/src/SymbolTable/BasicScope.java
--- a/src/SymbolTable/BasicScope.java	(revision 503f2dd52d14c2f5c7e2c1a6f72e52179d3c3757)
+++ b/src/SymbolTable/BasicScope.java	(date 1624085631025)
@@ -26,31 +26,23 @@
     @Override
     public void addSymbol(Symbol symbol) {
 
-        if(symbol instanceof VariableExpressionSymbol){
-            if(this.bindOrLookUpSymbol(symbol) == null){
+        if (symbol instanceof VariableExpressionSymbol) {
+            if (this.bindOrLookUpSymbol(symbol) == null) {
                 this.symbols.add(symbol);
             }
-        }else{
+        } else {
             this.symbols.add(symbol);
         }
 
-//        if (symbol instanceof Scope) { //scope
-//            symbols.add(symbol);
-//        } else { //variable
-//            if (this.bindOrLookUpSymbol(symbol) == null) {
-//                this.symbols.add(symbol);
-//            }
-//
-//        }
     }
 
-    public void addSymbolWithoutBinding(Symbol symbol){
+    public void addSymbolWithoutBinding(Symbol symbol) {
         this.symbols.add(symbol);
     }
 
-    public CpAttribute getCpAttribute(String attributeName){
+    public CpAttribute getCpAttribute(String attributeName) {
         for (Symbol symbol : this.symbols) {
-            if(symbol instanceof CpAttribute && ((CpAttribute) symbol).attributeName.equals(attributeName)){
+            if (symbol instanceof CpAttribute && ((CpAttribute) symbol).attributeName.equals(attributeName)) {
                 return (CpAttribute) symbol;
             }
         }
@@ -84,33 +76,11 @@
         return null;
     }
 
-//    public boolean bindOrLookUpComparableSymbol(ICompareableSymbol<Symbol> searchedForSymbol) {
-//        boolean match = false;
-//        for (Symbol symbol : this.symbols) {
-//            if(symbol instanceof ICompareableSymbol){
-//                if(searchedForSymbol.compareSymbolWith(symbol)){
-//                    match = true;
-//                    break;
-//                }
-//            }
-//        }
-//        if (match) return true;
-//        if (getEnclosingScope() != null) {
-//            return ((BasicScope)getEnclosingScope()).bindOrLookUpComparableSymbol(searchedForSymbol);
-//        }
-//        return false;
-//    }
 
     @Override
     public Scope getEnclosingScope() {
         return enclosingScope;
     }
 
-//    public void addToGlobalIfCould(ICompareableSymbol<Symbol> symbol, BasicScope globalScope){
-//
-//        if(!this.bindOrLookUpComparableSymbol(symbol)){
-//            globalScope.addSymbol((Symbol) symbol);
-//        }
-//
-//    }
+
 }
Index: out/production/compiler-project-4th-year/samples/symbol-table-result.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n  \"globalScope\": {\r\n    \"Scope\": [\r\n      {\r\n        \"tagName\": \"div\",\r\n        \"Scope\": [],\r\n        \"symbol\": \"html element\"\r\n      }\r\n    ],\r\n    \"symbol\": \"HtmlDocument Scope\"\r\n  }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/out/production/compiler-project-4th-year/samples/symbol-table-result.json b/out/production/compiler-project-4th-year/samples/symbol-table-result.json
--- a/out/production/compiler-project-4th-year/samples/symbol-table-result.json	(revision 503f2dd52d14c2f5c7e2c1a6f72e52179d3c3757)
+++ b/out/production/compiler-project-4th-year/samples/symbol-table-result.json	(date 1624906930457)
@@ -2,9 +2,50 @@
   "globalScope": {
     "Scope": [
       {
-        "tagName": "div",
-        "Scope": [],
-        "symbol": "html element"
+        "tagName": "html",
+        "Scope": [
+          {
+            "tagName": "div",
+            "Scope": [
+              {
+                "attributeName": "cp-for",
+                "value": {
+                  "countersExpression": {
+                    "variableName": "x",
+                    "type": "gen.HTMLParser$VariableNameExpressionContext",
+                    "symbol": "variable expression"
+                  },
+                  "forExpression": {
+                    "variableName": "y",
+                    "type": "gen.HTMLParser$VariableNameExpressionContext",
+                    "symbol": "variable expression"
+                  },
+                  "type": "gen.HTMLParser$ForInExpressionContext",
+                  "symbol": "for expression"
+                },
+                "symbol": "cp attribute"
+              },
+              {
+                "variableName": "x",
+                "type": "gen.HTMLParser$VariableNameExpressionContext",
+                "symbol": "variable expression"
+              },
+              {
+                "TEXT_VARIABLE": "text variable usage",
+                "variableName": "x",
+                "type": "SymbolTable.expression.TextVariableUsage",
+                "symbol": "text variable usage"
+              }
+            ],
+            "symbol": "html element"
+          }
+        ],
+        "symbol": "html element"
+      },
+      {
+        "variableName": "y",
+        "type": "gen.HTMLParser$VariableNameExpressionContext",
+        "symbol": "variable expression"
       }
     ],
     "symbol": "HtmlDocument Scope"
